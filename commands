#!/bin/bash
#set -e;

check_already_exists() {
  if [[ -f "$HOME/pass_$APP" ]]; then
    echo "Database $APP already exists."
    exit 1
  fi
}

check_exists() {
  if [[ ! -f "$HOME/pass_$APP" ]]; then
    echo "No database configured with name: $APP"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "Postgresql container not started cannot continue. Start with dokku psql:start"
    exit 1
  fi
}

load_ip_and_container() {
  id=$(docker ps -f status=running | grep "$db_image":latest | awk '{print $1}')
  if [[ -n "$id" ]]; then
    private_ip=$(docker inspect ${id} | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    port=5432
  fi
}

db_url() {
  _app=$1
  _database=$(cat "$HOME/db_$_app")
  _database_pw=$(cat "$HOME/pass_$_app")
  echo "postgresql://${_database}:${_database_pw}@${private_ip}:${port}/${_database}"
}

database_name() {
  echo "$1" | tr .- _
}

env_for() {
  _app=$1
  if [[ -f "$HOME/db_$_app" ]] && [[ -f "$HOME/pass_$_app" ]]; then
    _url=$(db_url "$_app")
    _database=$(cat "$HOME/db_$_app")
    _database_pw=$(cat "$HOME/pass_$_app")
    echo "DATABASE_URL=$_url POSTGRESQL_URL=$_url DB_TYPE=postgresql DB_HOST=$private_ip DB_PORT=$port DB_NAME=$_database DB_USER=$_database DB_PASS=$_database_pw"
  fi
}

restart_apps() {
  load_ip_and_container
  for APP_NAME in $(find "$DOKKU_ROOT/.o_psql/"* -maxdepth 0 -name 'db*' -printf '%f\n' | sed 's/.*db_//'); do
    echo "-----> Setting config vars for $APP_NAME"
    dokku config:set-norestart "$APP_NAME" $(env_for "$APP_NAME") &> /dev/null
    echo "-----> Restarting application: $APP_NAME"
    dokku ps:restart $APP_NAME
  done
}

if [[ $1 == psql:* ]]; then
  _path=".o_psql"
  db_image="flink/dokku-psql"

  APP=$2
  APP_ROOT="$DOKKU_ROOT/$APP"
  OLDHOME=$HOME
  HOME="$DOKKU_ROOT/$_path"

  load_ip_and_container
fi

case "$1" in
  psql:admin_console)
    check_container
    docker exec -it $id env TERM=$TERM manage admin_console
    ;;

  psql:console)
    check_container && check_app && check_exists
    database=$(cat "$HOME/db_$APP")
    database_pw=$(cat "$HOME/pass_$APP")
    docker exec -it $id env TERM=$TERM manage console "$database" "$database_pw"
    ;;

  psql:url)
    check_container && check_app && check_exists
    db_url "$APP"
    ;;

  psql:create)
    check_container && check_app && check_already_exists
    new_password=$(openssl rand -hex 32)
    database=$(database_name "$APP")
    echo $database > "$HOME/db_$APP"
    echo $new_password > "$HOME/pass_$APP"
    chmod 600 "$HOME/db_$APP" "$HOME/pass_$APP"
    echo "-----> Creating database $APP"
    docker exec $id manage create "$database" "$new_password" > /dev/null
    if [[ -d "$APP_ROOT" ]]; then
      echo "-----> Setting config vars for $APP"
      dokku config:set-norestart "$APP" $(env_for "$APP") &> /dev/null
    fi
    ;;

  psql:delete)
    check_container && check_app && check_exists
    database=$(cat "$HOME/db_$APP")
    echo "-----> Deleting database $APP"
    docker exec $id manage delete "$database" > /dev/null
    rm -f "$HOME/db_$APP"
    rm -f "$HOME/pass_$APP"
    if [[ -d "$APP_ROOT" ]]; then
      echo "-----> Unsetting config vars for $APP"
      dokku config:unset-norestart "$APP" DATABASE_URL POSTGRESQL_URL DB_TYPE DB_HOST DB_PORT DB_NAME DB_USER DB_PASS &> /dev/null
    fi
    ;;

  psql:list)
    check_container
    docker exec -it $id env TERM=$TERM manage list
    ;;

  psql:pre_build)
    if [[ -z "$id" ]]; then
      if [[ -d "$APP_ROOT" ]]; then
        dokku psql:start
        sleep 5
      fi
    fi
    ;;

  psql:start)
    if [[ -n "$id" ]]; then
      echo "Postgresql container already running with ID: ${id}"
      exit 1
    fi
    echo "-----> Starting Postgresql server"
    docker run -d -v $HOME/data:/var/lib/postgresql/9.3/main "$db_image" start
    restart_apps
    ;;

  psql:restart)
    dokku psql:stop
    dokku psql:start
    ;;

  psql:stop)
    check_container
    echo "-----> Stopping Postgresql server"
    docker stop ${id}
    ;;

  psql:dump)
    check_container && check_app && check_exists
    database=$(cat "$HOME/db_$APP")
    passwd=$(cat "$HOME/pass_$APP")
    docker exec -i $id manage dump "$database" "$passwd"
    ;;

  psql:restore)
    check_container && check_app && check_exists
    database=$(cat "$HOME/db_$APP")
    passwd=$(cat "$HOME/pass_$APP")
    cat - | docker exec -i $id manage restore "$database" "$passwd"
    ;;

  psql:status)
    if [[ -n "$id" ]]; then
      echo "Postgresql container running with ID: ${id}"
      exit 0
    fi
    echo "Postgresql container not running"
    ;;

  psql:install)
    [[ -d "$HOME" ]] && exit 0
    mkdir -p "$HOME/data"
    docker run "$db_image" cmd "cd /var/lib/postgresql/9.3/main && tar -cp ./" | tar -x -C "$HOME/data/" -f -
    docker run "$db_image" cmd "rm -rf /var/lib/postgresql/9.3/main && mkdir -p /var/lib/postgresql/9.3/main"
    docker run "$db_image" cmd "chown -R postgres:postgres /var/lib/postgresql/9.3/main"
    ;;

  help)
    cat && cat<<EOF
    psql:console     <app>                          Launch a postgresql console for <app>
    psql:url         <app>                          Get DATABASE_URL for <app>
    psql:create      <app>                          Create a Postgresql database for <app>
    psql:delete      <app>                          Delete Postgresql database for <app>
    psql:dump        <app> > <filename.dump>        Dump <app> database to PG dump format
    psql:restore     <app> < <filename.*>           Restore database to <app> from any format exported by pg_dump
    psql:admin_console                              Launch a postgresql console as admin user
    psql:restart                                    Restart the Postgresql docker container
    psql:start                                      Start the Postgresql docker container if it isn't running
    psql:stop                                       Stop the Postgresql docker container
    psql:status                                     Shows status of Postgresql
    psql:list                                       List all databases
EOF
    ;;
esac
