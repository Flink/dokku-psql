#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(dirname $0)/../common/functions"
source "$(dirname $0)/functions"
set +e

if [[ $1 == psql:* ]]; then
  load_ip_and_container
fi

case "$1" in
  psql:admin_console)
    check_container
    docker exec -it $id env TERM=$TERM manage admin_console
    ;;

  psql:console)
    check_container; check_app; verify_app_name "$APP"; check_exists
    database=$(cat "$PSQL_ROOT/db_$APP")
    database_pw=$(cat "$PSQL_ROOT/pass_$APP")
    docker exec -it $id env TERM=$TERM manage console "$database" "$database_pw"
    ;;

  psql:url)
    check_container; check_app; verify_app_name "$APP"; check_exists
    db_url "$APP"
    ;;

  psql:create)
    check_container; check_app; verify_app_name "$APP"; check_already_exists
    new_password=$(openssl rand -hex 32)
    database=$(database_name "$APP")
    echo $database > "$PSQL_ROOT/db_$APP"
    echo $new_password > "$PSQL_ROOT/pass_$APP"
    chmod 600 "$PSQL_ROOT/db_$APP" "$PSQL_ROOT/pass_$APP"
    dokku_log_info1 "Creating database $APP"
    docker exec $id manage create "$database" "$new_password" > /dev/null
    set_env_for "$APP"
    ;;

  psql:delete)
    check_container; check_app; check_exists
    database=$(cat "$PSQL_ROOT/db_$APP")
    dokku_log_info1 "Deleting database $APP"
    docker exec $id manage delete "$database" > /dev/null
    rm -f "$PSQL_ROOT/db_$APP"
    rm -f "$PSQL_ROOT/pass_$APP"
    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku_log_info1 "Unsetting config vars for $APP"
      dokku config:unset-norestart "$APP" DATABASE_URL POSTGRESQL_URL DB_TYPE DB_HOST DB_PORT DB_NAME DB_USER DB_PASS &> /dev/null
    fi
    ;;

  psql:list)
    check_container
    docker exec -it $id env TERM=$TERM manage list
    ;;

  psql:start)
    if [[ -n "$id" ]]; then
      echo "Postgresql container already running with ID: ${id}"
      exit 1
    fi
    dokku_log_info1 "Starting Postgresql server"
    docker run -d -v $PSQL_ROOT/data:/var/lib/postgresql/9.3/main "$PSQL_IMAGE" start
    restart_apps
    ;;

  psql:restart)
    dokku psql:stop
    dokku psql:start
    ;;

  psql:stop)
    check_container
    dokku_log_info1 "Stopping Postgresql server"
    docker stop ${id}
    ;;

  psql:dump)
    check_container; check_app; verify_app_name "$APP"; check_exists
    database=$(cat "$PSQL_ROOT/db_$APP")
    passwd=$(cat "$PSQL_ROOT/pass_$APP")
    docker exec -i $id manage dump "$database" "$passwd"
    ;;

  psql:restore)
    check_container; check_app; verify_app_name "$APP"; check_exists
    database=$(cat "$PSQL_ROOT/db_$APP")
    passwd=$(cat "$PSQL_ROOT/pass_$APP")
    cat - | docker exec -i $id manage restore "$database" "$passwd"
    ;;

  psql:status)
    [[ -n "$id" ]] && echo "Postgresql container running with ID: ${id}" && exit 0
    echo "Postgresql container not running"
    ;;

  help)
    cat && cat<<EOF
    psql:console     <app>                          Launch a postgresql console for <app>
    psql:url         <app>                          Get DATABASE_URL for <app>
    psql:create      <app>                          Create a Postgresql database for <app>
    psql:delete      <app>                          Delete Postgresql database for <app>
    psql:dump        <app> > <filename.dump>        Dump <app> database to PG dump format
    psql:restore     <app> < <filename.*>           Restore database to <app> from any format exported by pg_dump
    psql:admin_console                              Launch a postgresql console as admin user
    psql:restart                                    Restart the Postgresql docker container
    psql:start                                      Start the Postgresql docker container if it isn't running
    psql:stop                                       Stop the Postgresql docker container
    psql:status                                     Shows status of Postgresql
    psql:list                                       List all databases
EOF
    ;;
esac
